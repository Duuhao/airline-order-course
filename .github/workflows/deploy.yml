name: 部署到AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - prod

jobs:
  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: []
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # - name: 登录到容器注册表（可选）
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ${{ secrets.REGISTRY_URL }}
    #     username: ${{ secrets.REGISTRY_USERNAME }}
    #     password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: 构建后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: airline-backend:latest
        build-args: |
          SKIP_TESTS=true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 构建前端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./frontend/Dockerfile
        push: false
        tags: airline-frontend:latest
        build-args: |
          SKIP_TESTS=true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: |
          backend/
          frontend/
          docker-compose.yml
          docker-compose.prod.yml
          deploy.sh
          manage.sh
          env.example

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment: development
    
    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        
    - name: 配置AWS凭据
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 部署到开发环境EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        script: |
          # 停止现有服务
          cd /opt/airline-order-course
          ./manage.sh stop dev || true
          
          # 拉取最新代码
          git pull origin develop
          
          # 启动服务
          ./manage.sh start dev
          
          # 健康检查
          sleep 30
          ./manage.sh status dev

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        name: docker-images
        
    - name: 配置AWS凭据
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 部署到生产环境EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        script: |
          # 创建备份
          cd /opt/airline-order-course
          ./manage.sh backup prod
          
          # 停止现有服务
          ./manage.sh stop prod
          
          # 拉取最新代码
          git pull origin main
          
          # 启动服务
          ./manage.sh start prod
          
          # 健康检查
          sleep 60
          ./manage.sh status prod
          
          # 验证部署
          if curl -f http://localhost/health > /dev/null 2>&1; then
            echo "部署成功！"
          else
            echo "部署失败，回滚..."
            git reset --hard HEAD~1
            ./manage.sh start prod
            exit 1
          fi

  # 部署后验证
  post-deploy-verification:
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    
    steps:
    - name: 等待服务启动
      run: sleep 120
      
    - name: 验证生产环境
      run: |
        # 这里可以添加更多的验证逻辑
        # 比如API测试、性能测试等
        echo "生产环境部署验证完成"
        
    - name: 发送通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          航空订票系统部署状态: ${{ job.status }}
          环境: 生产环境
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
